Working

    Assets:
      - Build asset system to manage memory/loading/caching etc.
    Graphics:
      - Create a more cohesive way to represent sprites
        - Allocation should be done through a block allocator
        - Tie in with physics system (via entity).  Note: SpriteGroup/RigidBody
        - Logically separate position from depth - use vec2 when setting position
      - TileLayer
        x Add culling
        x Add blending for upper layers
        - ImGui support (rendering statistics)
        - [maybe] Global color (for tinting)
        - Add support TileRenderOrder
        - Investigate severing the global grid from the TileLayer.  Now that culling
          is working I no longer think it's required to key off of a global x/y, so
          the intersects_with test will actually mean something again when used with
          a sparsely tiled layer.



Assets:
  - Add bitmap font support
  - Remove SDL_ttf dependency

Graphics:
  - Add shader support for distance field fonts
  - Better support for texture based filter, blending & wrapping (look to LibGDX)
  - Add support for 24bpp images (surface and texture)
  - Remove glew dependency in favor of glLoadGen
  - Add viewport class
  - Shader hot reload
  - OpenGL context settings configuration variables
  - Add texture sorting for properly rendering semi-transparent sprites

Graphics (low priority);
  - Add rich text support
  - Implement "focus" system for UI controls
  - Create a perspective camera
  - Ability to pad NPOT textures

Physics:
  - Move GJK and all itersects methods out of the shapes and into collision.cpp
  - Solving:
    - Warm starting (seems to cut down processing time considerably)
    - Box2D "Box Solver" LCP (Linear complementarity problem)
    - TOI solver
  - Change GraphListener to lambdas.  Implement destruction listener.
  - RigidBody has a lot of unimplemented methods
  - Clean up and finish documenting
  - Stats
  - Add way to step at a set interval defined through the ctor
  - [maybe] More joint support

Math:

Util:
  - Enhance global memory tracker
    - Find an elegant way to categorize tracking.
      - Idea: Remove all memory_profile references, and rather than passing the pointer
        to the profile you just pass an enum.  Subsystems could be better tracked by creating
        a stateful system (e.g. PUSH_TRACKED_MEMORY_SUBSYSTEM(xxx_physics)).  The enums
        provided to the malloc call would be more specific, like xxx_freelist.
    - Improve ImGui memory tracking window.
    - Find solution for properly aligning memory.
  - Add proper logging across the library
  - Normalize and add support for normal print and pretty printing
  - Support TextInput and TextEdit SDL events

Debug:
  - Normalize a stat dump system across all applicable objects
    - Useful for outputting stats at run time and on command
    - Perhaps using metaprogramming to dynamically build display output
  - Add more debug rendering functionality
    - Labels placed on the upper left corner of a wireframe
    - Enhance physics rendering similar to Box2D
    - Add support for line widths (have to use quads w/ shader b/c lack of line width support)
    - Create debug settings for what to display.  Should be able to be reloaded at runtime.
  - Create event recording and playback

Game
  - Application ctor should take the path, as well as the settings
  - Anchoring system for entity placement

Misc
  - Support targeted builds
  - Verify delegating constructors across library
  - Init SDL on demand
  - Ensure Move semantics across library
  - Code conformity maintenence

Low Priority
  - Create scope guard
  - std::optional support
  - Clean up maths
  - Create Parallax layer
  - Support for custom config values (possibly with hot reload)
  - Create a better sqrt
