Monitoring
    Logger occasionally does not start
      - I delayed the logger initialization.  Probably won't fix it, but it's low priority.

Working (bugs)

    Physics Circle/Poly collision
      - Ordering is wrong so the normal is messed up.  Adding the rect prior to the circle
        works, vice versa does not.

Working (enhancements)

    Util:
      - Create a vector-like container for tracking memory
        - Update all asset classes to use that rather than a vector
    Graphics:
      - Create a more cohesive way to represent sprites
        - Explictly define sprites from object sheet and normal sprites
        - Tie in with physics system (via entity).  Note: SpriteGroup/RigidBody
        - Logically separate position from depth - use vec2 when setting position
          - Remove m_far from TileBatch (really only applicable for bg layers)
      - Remove ISprite, Sprite, vops, etc.
        - Clean up SpriteBatch for above


Game:
  - Define a global object id
    - This is to tie in different resources (e.g. The dialog system, animations, etc.)
  - Rather than creating a class for each NPC, I could create a generic actor which
    uses the global object id to load all data, and perhaps even behavior/attributes.

Assets:
  - Investigate removing shared_asset destrutor call (to allow forward decl)
    - Look into shared_ptr deleter
  - Changes to Tilemap
    - Convert layer to y-is-up (or document why it can be unique)

Graphics:
  - Animation
    - Rather than have all objects constantly playing animations, make changes to
      have define a base frame for each direction.  Then for animations (like idle
      blinking) I don't need to support multiple intervals.  Also, this would
      allow me to have multiple animations per state (e.g. idle_blink and idle_stretch).
    - Updates must be made to the json files
  - Add support for 24bpp images (surface and texture)
    - Probably better just to force load everything with 4 channels.
  - Remove glew dependency in favor of glLoadGen
  - Shader hot reload
  - OpenGL context settings configuration variables
  - Text rendering
    - Unicode support (wchar_t)
    - Rich Text / Markup support
    - GlyphLayout could have special functionality for monospaced fonts, like
      the ability to only change the uv coordinates rather than rebuild

Graphics (low priority - implement as needed);
  - General
    - Implement "focus" system for UI controls
    - Add viewport class
    - Create a perspective camera
    - Ability to pad NPOT textures
    - Improve texture sorting (see HMH radix sort)
  - SpriteLayer
    - Add support SpriteRenderOrder
    - Global color (for tinting)
  - TileLayer
    - Add support TileRenderOrder
    - TileLayer Global color (for tinting)

Physics:
  - Change all for_each lambdas to use a range based for
  - Move GJK and all itersects methods out of the shapes and into collision.cpp
  - Solving:
    - Warm starting (seems to cut down processing time considerably)
    - Box2D "Box Solver" LCP (Linear complementarity problem)
    - TOI solver
  - Change GraphListener to lambdas.  Implement destruction listener.
  - RigidBody has a lot of unimplemented methods
  - Clean up and finish documenting
  - Stats
  - Add way to step at a set interval defined through the ctor
  - [maybe] More joint support
  - Add support for:
    - RigidBody bullet flag

Math:

Util:
  - Enhance global memory tracker
    - Allow containers to use different memory buckets
    - Find solution for properly aligning memory.
    - Investigate overriding SDL allocation for tracking (like STB is overridden in surface.cpp)

  - Add proper logging across the library
  - Normalize and add support for normal print and pretty printing
  - Support TextInput and TextEdit SDL events

Debug:
  - Create ImGui "System" widget to display system information
    - Would include SDL and OpenGL info
    - Include a "Print to log" button
    - Allow all stats to be printed to the log at startup via app_setting config
  - Add more debug rendering functionality
    - Labels placed on the upper left corner of a wireframe
    - Enhance physics rendering similar to Box2D
    - Add support for line widths (have to use quads w/ shader b/c lack of line width support)
    - Create debug settings for what to display.  Should be able to be reloaded at runtime.
  - Create event recording and playback

Game
  - Application ctor should take the path, as well as the settings
  - Anchoring system for entity placement

Misc
  - Remove internal
  - Support targeted builds
  - Verify delegating constructors across library
  - Init SDL on demand
  - Ensure Move semantics across library
  - Code conformity maintenence

Resources
  - Iterators
    - https://github.com/llvm-mirror/llvm/blob/master/include/llvm/ADT/iterator.h
    - https://github.com/electronicarts/EASTL/blob/master/include/EASTL/iterator.h
    - https://stackoverflow.com/questions/8054273/how-to-implement-an-stl-style-iterator-and-avoid-common-pitfalls

Low Priority
  - Create scope guard
  - std::optional support
  - Clean up maths
  - Create Parallax layer
  - Support for custom config values (possibly with hot reload)
  - Create a better sqrt
